/*
Problem 29: Distinct powers

Consider all integer combinations of a^b for 2 a 5 and 2 b 5:

  2^2=4, 2^3=8, 2^4=16, 2^5=32
  3^2=9, 3^3=27, 3^4=81, 3^5=243
  4^2=16, 4^3=64, 4^4=256, 4^5=1024
  5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we
get the following sequence of 15 distinct terms:

     4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for
2 <= a <= 100 and 2 <= b <= 100?
*/

var lo = require('lodash');

function isSquare(x) {
    // wrapper 
    return isNthPower(2);
}

function isNthPower(n) {
    // returns a function that checks if x has a int t s.t t^n === x
    function temp(x) {
        var counter = 1;
        while (counter**n < x) {
            counter++;
        }
        if (counter**n === x) {
            return true;
        }
        else {
            return false;
        }
    }
    return temp;
}

function NthRoot(n) {
    // finds the nth root of x, check that x actually has a nth root first
    // i'll generalize this later if I need to use it again, good enough for
    // now
    function root(x) {
        var counter = 1;
        while (counter**n < x) {
            counter++;
        }
        return counter;
    }
    return root;
}

function reduceBaseN(n) {
    // Holy shit! it worked on first attempt! don't put [1,1] inside here
    // blows the stack
    function reduceBase(pair) {
        if (!(isNthPower(n)(pair[0]))) {
            return pair;
        }
        else {
            var temp = [NthRoot(n)(pair[0]), n * pair[1]];
            return reduceBase(temp);
        }
    }
    return reduceBase;
}

// Closure-gasm
var composition = lo.reduce(lo.map(lo.range(2, 7), reduceBaseN), (a, b) => {
                    return  (x) => { return b(a(x));};});

var As = lo.map(lo.range(2,101), (x) => { return composition([x, 1]);})

function aEb() {
    // wrapper for solution
    var pairings = new Set();
    for (var A of As) {
        for (var b of lo.range(2, 101)) {
            var temp = String(A[0]) + ',' + String(A[1] * b);
            pairings.add(temp);
        }
    }
    return pairings.size;
}

// Yay! worked on first attemp.
console.log(aEb())

