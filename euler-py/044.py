"""
Project Euler Problem 44
========================

Pentagonal numbers are generated by the formula, P[n]=n(3n-1)/2. The first
ten pentagonal numbers are:

               1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P[4] + P[7] = 22 + 70 = 92 = P[8]. However, their
difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P[j] and P[k], for which their sum
and difference is pentagonal and D = |P[k] - P[j]| is minimised; what is
the value of D?
"""

"""
   * P[n] is the nth pentagonal number
   * find a pair of pentagonal numbers P[i] & P[j] s.t sum is pentagonal, 
   difference is pentagonal, and D = abs(P[i] - P[j]) is minimised.
   * What is D?
   * D can't be 0
"""

"""
   * Initialize a cache of pentagonal numbers, with P[1] & P[2]
   * Start with the third pentagonal number, subtract every pentagonal number
   & check if it has a matching pair, pick the one with minimum D, save the
   save it as a tuple (T1, T2, D)
   * Add third number to cache, and repeat with 4th number

   - cache grows with time and gets reused to compute the addition & difference
   - I don't have a convergence condition, just guess and check for now
"""

from itertools import combinations
from functools import reduce

ans = 0

def solve(n):
    """
    Run for n iterations.
    """
    # sets have O(1) complexity for x in s
    cache = {triangular(i) for i in range(1,n+1)}
    cache2 = {triangular(i) for i in range(1, 2*n + 1)}
    
    pairs = set(filter(lambda x: x[1] + x[2] in cache2,
        filter(lambda x: x[0] in cache, 
            map(lambda x: (abs(x[0] - x[1]), x[0], x[1]), 
                combinations(cache, 2)))))

    return reduce(lambda x,y: x if x[0] < y[0] else y , pairs)

def triangular(n):
    """
    Returns the nth triangular number.
    """
    return (n*(3*n - 1)) // 2

print(solve(5000)[0])
