"""
Project Euler Problem 45
========================

Triangle, pentagonal, and hexagonal numbers are generated by the following
formulae:

Triangle     T[n]=n(n+1)/2   1, 3, 6, 10, 15, ...
Pentagonal   P[n]=n(3n-1)/2  1, 5, 12, 22, 35, ...
Hexagonal    H[n]=n(2n-1)    1, 6, 15, 28, 45, ...

It can be verified that T[285] = P[165] = H[143] = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

def generateTPH(n):
    tricache = mkcache(n, triangular)
    pentcache = mkcache(n, pentagonal)
    hexcache = mkcache(n, hexagonal)
    # manually extracted the answer, doesn't have a convergence condition
    # not too difficult to fix, but what's the point? Just regenrate the caches
    # every 100k or so passes. 
    
    return list(filter(lambda x: x in pentcache and x in hexcache, tricache))

def mkcache(n, f):
    return {f(i) for i in range(2, n + 1)}

def triangular(n):
    return (n*(n+1)) // 2

def pentagonal(n):
    return (n*(3*n - 1)) // 2

def hexagonal(n):
    return n*(2*n - 1)

print(generateTPH(100000)[1])
